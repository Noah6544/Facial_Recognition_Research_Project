import numpy as np
from PIL import Image
import cv2 as cv
import os
import glob
import time

###FILES
#surveillance FACE FILES


#surveillance EYE FILES

#TENK FACE FILES
database_exception_face_file = open("C:\\Users\\user1\\Documents\\research\\Coding\\files\\database_empty_face_file.txt","w")
database_empty_face_file = open("C:\\Users\\user1\\Documents\\research\\Coding\\files\\database_empty_face_file.txt","w")
database_1_face_file = open("C:\\Users\\user1\\Documents\\research\\Coding\\files\\database_1_face_file.txt","w")
database_2_face_file = open("C:\\Users\\user1\\Documents\\research\\Coding\\files\\database_2_face_file.txt","w")
database_3_face_file = open("C:\\Users\\user1\\Documents\\research\\Coding\\files\\database_3_face_file.txt","w")

#TENK EYE FILES
database_execption_eye_file = open("C:\\Users\\user1\\Documents\\research\\Coding\\files\\database_EXCEPTION_face_file.txt","w")
database_empty_eye_file = open("C:\\Users\\user1\\Documents\\research\\Coding\\files\\database_empty_eye_file.txt","w")
database_1_eye_file = open("C:\\Users\\user1\\Documents\\research\\Coding\\files\\database_1_eye_file.txt","w")
database_2_eye_file = open("C:\\Users\\user1\\Documents\\research\\Coding\\files\\database_2_eye_file.txt","w")
database_3_eye_file = open("C:\\Users\\user1\\Documents\\research\\Coding\\files\\database_3_eye_file.txt","w")
surveillance_camera_empty_face_file = open("C:\\Users\\user1\\Documents\\research\\Coding\\files\\surveillance_empty_faces.txt","w")

#FINAL

Final_Data_database_3_eye_file = open("C:\\Users\\user1\\Documents\\research\\Coding\\files\\Final_Data_Files\\database_3_eye_file.txt","r")
Final_Data_database_3_eye_file_list = []

#CASCADES:
eye_cascade = cv.CascadeClassifier("C:\\Users\\user1\\Documents\\research\\haarcascades\\haarcascade_eye.xml")
face_cascade_default = cv.CascadeClassifier("C:\\Users\\user1\\Documents\\research\\haarcascades\\haarcascade_frontalface_default.xml")


#PATHS AND LISTS
test_emptyface_list = []
test_noface = "C:\\Users\\user1\\\\10th grade\\research\\Coding\\Images\\001_L1.jpg"
mugshot_frontal_cropped_all = "C:\\Users\\user1\\Documents\\research\\SCface_database\\SCface_database\\mugshot_frontal_cropped_all\\"
mugshot_rotation_all= "C:\\Users\\user1\\Documents\\research\\SCface_database\\SCface_database\\mugshot_rotation_all\\"
testing_images_path = "C:\\Users\\user1\\Documents\\research\\Images\\"
surveillance_cameras_all = "C:\\Users\\user1\\Documents\\research\\SCface_database\\SCface_database\\surveillance_cameras_all\\"
surveillance_cameras_all_list = []
surveillance_cameras_all_empty_face = []
database = [mugshot_rotation_all,mugshot_rotation_all]
database_images = []
databasepath = "C:\\Users\\user1\\Documents\\research\\10k adult database\\10kfaces\\10k US Adult Faces Database\\Face Images\\"
tenkfacelist = []
tenkface_list_aligned = []
tenkface_empty = []
find_face_data = []
#VARAIBLES
width, height = 341,512


def find_face(image,emptylist,image_file_name):
    global find_face_data
    emptyfaces = 0
    find_face_data = face_cascade_default.detectMultiScale(image, 1.3, minNeighbors=5)
    #any face which is empty will return as a tuple, which is also empty. This returns all images which are empty.
    find_face_empty(find_face_data,image_file_name)
    for (x,y,w,h) in find_face_data:
        image = cv.rectangle(image,(x,y), (x+w,y+h), (0, 0, 0),4)
        image = cv.putText(image,"FACE",(x,y+-5),cv.FONT_HERSHEY_PLAIN,3,(0,0,0),5)
    return find_face_data

def find_face_empty(face_data, image_file_name):
    emptyfaces = 0
    if len(face_data) == 1:
        print("0 faces")
        database_1_face_file.write(image_file_name + "\n")
    elif len(face_data) == 0:
        print("There are no faces in this image")
        emptyfaces += 1
        database_empty_face_file.write(image_file_name + "\n")
    elif len(face_data) == 2:
        print("2 faces")
        database_2_face_file.write(image_file_name + "\n")
    else:
        database_exception_face_file.write(image_file_name + "\n")
        print("exception")

def find_eye_empty(eye_data,image_file_name):
    emptyfaces = 0
    if len(eye_data) == 1:
        print("1 eyes")
        database_1_eye_file.write(image_file_name + "\n")
    elif len(eye_data) == 0:
        print("0 eyes")
        emptyfaces += 1
        database_empty_eye_file.write(image_file_name + "\n")
    elif len(eye_data) == 3:
        print("3 eyes")
        database_3_eye_file.write(image_file_name + "\n")
    else:
        database_execption_eye_file.write(image_file_name + "\n")
        print("exception")





def find_eye(image,image_file_name):
    find_eye = eye_cascade.detectMultiScale(image, 1.3, minNeighbors=5)
    find_eye_empty(find_eye,image_file_name)
    for (x, y, w, h) in find_eye:
        left_pupil = int(x + (h / 2))
        right_pupil = int(y + (w / 2))
        image = cv.rectangle(image, (x, y), (x + w, y + h), (255, 255, 255), 1)
        image = cv.circle(image,(int(left_pupil),int(right_pupil)),3,(255,255,255),thickness=3)

#Sorts and writes all images from cam 8 directly to a list
def get_cam8(path,output_list):
    #finds all files in the database directory.
    for img in os.listdir(path):
        #camera8 is the only camera in the directory we want to display.
        if "cam8" in img:
            #Writes the entire file-path back in front of the img filename so that OpenCv can later find the jpg file and display it.
            output_list.append(path + img)
        elif "cam8" not in img:
            #If it's not from camera 8, it will be ignored.
            pass

def get_images(path,output_list):
    print(path)
    for img in os.listdir(path):
        print(img)
        output_list.append(path + img)
def get_images_fromfile(file,output_list):
    for image in file:
        print(image)
        image = image.strip("\n")
        output_list.append(image)
    return output_list


def show_image(image, windowname, waitkey):
    image = cv.imread(image)
    image = cv.resize(image, (width, height))
    cv.imshow(windowname, image)
    cv.waitKey(waitkey)


def displayimage_face_eye(list,windowname,waitkey,emptylist):
    global find_face_data
    count = 0
    for image in list:
        cvimage = cv.imread(image)
        find_eye(cvimage,image)
        cvimage = cv.resize(cvimage, (width, height))
        find_face(cvimage, emptylist, image)
        cv.imshow(windowname, cvimage)
        cv.waitKey(waitkey)
        count+=1


'''
def stabalize_eyes(path):
    count = 0
    global left
    global right
    for img in os.listdir(path):
        img = cv.imread(path + img)

        find_eye = eye_cascade.detectMultiScale(img, 1.3, minNeighbors=5)

        for (x, y, w, h) in find_eye:

            left = int(x + (h / 2))
            right = int(y + (w / 2))


        count += 1
        x, y = img.shape[:2]
        x_fourth, y_fourth = x/left, y/right
        T = np.float32([[1,0,x_fourth],[0,1,y_fourth]])
        translation = cv.warpAffine(img,T,(x,y))
        tenkface_list_aligned.append(img)
        cv.imshow("translation",translation)
        cv.waitKey(10)
        if count > 200:
            break
'''
#gets images and puts the file paths inside a list
get_images(databasepath,tenkfacelist)
print(tenkfacelist)
#gets images via a text file which stores the paths
#get_images_fromfile(databasepath,tenkfacelist)
displayimage_face_eye(tenkfacelist,"file",1,tenkface_empty)
cv.destroyAllWindows()
surveillance_camera_empty_face_file.close()
